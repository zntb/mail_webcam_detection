import os
import smtplib
import ssl
import imghdr
import logging
from email.message import EmailMessage
from pathlib import Path
from datetime import datetime
from dotenv import load_dotenv

class EmailService:
    def __init__(self):
        """Initialize email service with environment variables."""
        load_dotenv()
        
        self.logger = logging.getLogger(__name__)
        
        # Email configuration
        self.smtp_server = os.getenv("SMTP_SERVER", "smtp.gmail.com")
        self.smtp_port = int(os.getenv("SMTP_PORT", "587"))
        self.username = os.getenv("MAIL_USER")
        self.password = os.getenv("MAIL_PASS")
        self.receiver = os.getenv("RECEIVER_EMAIL")
        self.sender_name = os.getenv("SENDER_NAME", "Motion Detector")
        
        # Validate configuration
        self.validate_config()
        
    def validate_config(self):
        """Validate email configuration."""
        required_vars = ["MAIL_USER", "MAIL_PASS", "RECEIVER_EMAIL"]
        missing_vars = [var for var in required_vars if not os.getenv(var)]
        
        if missing_vars:
            error_msg = f"Missing required environment variables: {', '.join(missing_vars)}"
            self.logger.error(error_msg)
            raise ValueError(error_msg)
            
        self.logger.info("Email configuration validated successfully")
        
    def send_motion_alert(self, image_path):
        """Send motion detection alert email using EmailMessage."""
        try:
            # Create email message
            email_message = EmailMessage()
            email_message["From"] = f"{self.sender_name} <{self.username}>"
            email_message["To"] = self.receiver
            email_message["Subject"] = f"üö® Motion Detected - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            # Email body
            timestamp = datetime.now().strftime("%Y-%m-%d at %H:%M:%S")
            body = f"""Motion Detection Alert

Motion has been detected in your monitored area.

Detection Time: {timestamp}
Image: See attachment

This alert was automatically generated by your motion detection system.

Best regards,
Motion Detection System"""
            
            email_message.set_content(body)
            
            # Attach image if it exists
            if image_path and Path(image_path).exists():
                self.attach_image(email_message, image_path)
            else:
                self.logger.warning(f"Image not found for attachment: {image_path}")
                
            # Send email
            self.send_email(email_message)
            
        except Exception as e:
            self.logger.error(f"Failed to send motion alert: {e}")
            raise
            
    def attach_image(self, email_message, image_path):
        """Attach image to EmailMessage."""
        try:
            with open(image_path, "rb") as file:
                content = file.read()
                
            # Detect image type
            image_type = imghdr.what(None, h=content)
            if image_type is None:
                image_type = "png"  # Default fallback
                
            filename = Path(image_path).name
            email_message.add_attachment(
                content,
                maintype="image",
                subtype=image_type,
                filename=filename
            )
            
            self.logger.debug(f"Image attached: {filename}")
            
        except Exception as e:
            self.logger.error(f"Error attaching image {image_path}: {e}")
            raise
            
    def send_email(self, email_message):
        """Send email using SMTP with EmailMessage."""
        try:
            # Create SMTP session with SSL context
            context = ssl.create_default_context()
            
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.ehlo()  # Can be omitted
                server.starttls(context=context)  # Enable security
                server.ehlo()  # Can be omitted
                server.login(self.username, self.password)
                
                # Send email
                server.send_message(email_message)
                
            self.logger.info(f"Email sent successfully to {self.receiver}")
            
        except smtplib.SMTPAuthenticationError as e:
            self.logger.error(f"SMTP authentication failed: {e}")
            self.logger.error("Check username/password and ensure 2FA + App Password is set up")
            raise
        except smtplib.SMTPRecipientsRefused as e:
            self.logger.error(f"Recipient refused: {e}")
            raise
        except smtplib.SMTPServerDisconnected as e:
            self.logger.error(f"SMTP server disconnected: {e}")
            raise
        except Exception as e:
            self.logger.error(f"Unexpected error sending email: {e}")
            raise
            
    def send_test_email(self, test_image_path=None):
        """Send test email to verify configuration."""
        try:
            email_message = EmailMessage()
            email_message["From"] = f"{self.sender_name} <{self.username}>"
            email_message["To"] = self.receiver
            email_message["Subject"] = "‚úÖ Motion Detector Test Email"
            
            body = f"""Motion Detection System Test

This is a test email to verify your motion detection system email configuration.

Test Time: {datetime.now().strftime('%Y-%m-%d at %H:%M:%S')}

If you received this email, your email configuration is working correctly.

System Status: ‚úÖ Operational"""
            
            email_message.set_content(body)
            
            if test_image_path and Path(test_image_path).exists():
                self.attach_image(email_message, test_image_path)
                
            self.send_email(email_message)
            print("‚úÖ Test email sent successfully!")
            
        except Exception as e:
            print(f"‚ùå Test email failed: {e}")
            raise

if __name__ == "__main__":
    # Test the email service
    try:
        email_service = EmailService()
        email_service.send_test_email()
    except Exception as e:
        print(f"Email service test failed: {e}")